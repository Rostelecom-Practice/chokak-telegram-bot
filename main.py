import asyncio
import os

from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from api import get_cities_from_api, prepare_cities_db, fetch_organizations

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

class Form(StatesGroup):
    waiting_for_city = State()
    city_selection = State()
    waiting_for_category = State()

CITIES_DB = {}

main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text='–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å')],
    [KeyboardButton(text='–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å')]
])


def get_categories_kb():
    builder = InlineKeyboardBuilder()

    categories = {
        'RESTAURANTS_AND_CAFES': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ',
        'CINEMA_AND_CONCERTS': '–ö–∏–Ω–æ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã',
        'PARKS_AND_MUSEUMS': '–ü–∞—Ä–∫–∏ –∏ –º—É–∑–µ–∏',
        'SHOPPING_AND_STORES': '–®–æ–ø–ø–∏–Ω–≥ –∏ –º–∞–≥–∞–∑–∏–Ω—ã',
        'HOTELS_AND_HOSTELS': '–û—Ç–µ–ª–∏ –∏ —Ö–æ—Å—Ç–µ–ª—ã',
    }

    for category_code, category_name in categories.items():
        builder.button(text=category_name, callback_data=f"cat_{category_code}")

    builder.adjust(3)

    return builder.as_markup()

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(F.text.lower().in_(['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—Ö–∞–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å']))
async def greeting_handler(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üòä", reply_markup=main_menu_kb)

@dp.message(F.text == '–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å')
async def what_can_you_do(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ;\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–∏–Ω–æ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç;\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∫–∞—Ö –∏ –º—É–∑–µ—è—Ö;\n"
        "‚Ä¢ –ê —Ç–∞–∫–∂–µ –æ —à–æ–ø–ø–∏–Ω–≥–µ, –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ —Ç. –¥.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å¬ª, –∏ —è —Å–ø—Ä–æ—à—É —É —Ç–µ–±—è –≥–æ—Ä–æ–¥.",
        reply_markup=main_menu_kb
    )

@dp.message(F.text == '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å')
async def where_to_go(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_city)
    await message.answer(
        f"{message.from_user.first_name}, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Form.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    user_input = message.text.strip().lower()
    matches = []

    for key, info in CITIES_DB.items():
        if user_input in key:
            matches.append(info['name'])

    await state.update_data(user_input=user_input)

    if not matches:
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ üòî", reply_markup=main_menu_kb)
        await state.clear()
        return

    if len(matches) > 1:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=city, callback_data=f"city_{city}")]
            for city in matches
        ])
        await state.set_state(Form.city_selection)
        await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π –∏–∑ –Ω–∏—Ö:", reply_markup=kb)
        return

    chosen = matches[0]
    await state.update_data(chosen_city=chosen)
    await state.set_state(Form.waiting_for_category)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤ –≥–æ—Ä–æ–¥–µ ¬´{chosen}¬ª! üîç\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_kb()
    )

@dp.callback_query(F.data.startswith("cat_"), Form.waiting_for_category)
async def process_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_info = CITIES_DB.get(data['chosen_city'].lower())
    if not city_info:
        return await callback.message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", reply_markup=main_menu_kb)

    cat_code = callback.data[len("cat_"):]
    request_body = {
        "cityId":  city_info['id'],
        "type":    cat_code,
        "criteria":"RELEVANCE",
        "to":      2
    }
    results = await fetch_organizations(request_body)

    if not results:
        return await callback.message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ ¬´{city_info['name']}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=main_menu_kb
        )

    messages = []
    for org in results:
        name    = org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        address = org.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
        rating  = org.get('rating', 0)
        stars = max(0, min(5, int(round(rating))))
        stars_line = '‚≠ê' * stars + '‚òÜ' * (5 - stars)

        block = (
            f"<b>{name}</b>\n"
            f"{address}\n"
            f"{stars_line}  ({rating:.1f})"
        )
        messages.append(block)

    text = "\n\n".join(messages)
    await callback.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=main_menu_kb
    )

@dp.message(F.text.startswith('/start'))
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ. –ù–∞–∂–º–∏ ¬´–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞!",
        reply_markup=main_menu_kb
    )

@dp.message(F.text.startswith('/help'))
async def cmd_help(message: Message):
    await what_can_you_do(message)

@dp.message()
async def fallback(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=main_menu_kb)

async def main():
    global CITIES_DB
    cities = await get_cities_from_api()
    CITIES_DB = prepare_cities_db(cities)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
