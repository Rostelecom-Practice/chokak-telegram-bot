import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")


class Form(StatesGroup):
    waiting_for_city = State()
    city_selection = State()
    waiting_for_category = State()

CITIES_DB = {
    '–º–æ—Å–∫–≤–∞': ['–ú–æ—Å–∫–≤–∞'],
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': ['–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': ['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'],
    '–Ω–æ–≤–æ-': ['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ù–æ–≤–æ–∞–ª—Ç–∞–π—Å–∫'],
}

main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text='–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å')],
    [KeyboardButton(text='–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å')]
])

def get_categories_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ', callback_data='cat_restaurants')],
        [InlineKeyboardButton(text='–ö–∏–Ω–æ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã', callback_data='cat_cinema')],
        [InlineKeyboardButton(text='–ü–∞—Ä–∫–∏ –∏ –º—É–∑–µ–∏', callback_data='cat_parks')],
        [InlineKeyboardButton(text='–®–æ–ø–ø–∏–Ω–≥ –∏ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data='cat_shopping')],
    ])

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(F.text.lower().in_(['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—Ö–∞–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å']))
async def greeting_handler(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üòä", reply_markup=main_menu_kb)

@dp.message(F.text == '–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å')
async def what_can_you_do(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ;\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–∏–Ω–æ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç;\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∫–∞—Ö –∏ –º—É–∑–µ—è—Ö;\n"
        "‚Ä¢ –ê —Ç–∞–∫–∂–µ –æ —à–æ–ø–ø–∏–Ω–≥–µ, –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ —Ç. –¥.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å¬ª, –∏ —è —Å–ø—Ä–æ—à—É —É —Ç–µ–±—è –≥–æ—Ä–æ–¥.",
        reply_markup=main_menu_kb
    )

@dp.message(F.text == '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å')
async def where_to_go(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_city)
    await message.answer(
        f"{message.from_user.first_name}, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Form.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    user_input = message.text.strip().lower()
    matches = []
    for key, val in CITIES_DB.items():
        if user_input in key:
            matches.extend(val)
    matches = list(dict.fromkeys(matches))

    await state.update_data(user_input=user_input)

    if not matches:
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ üòî", reply_markup=main_menu_kb)
        await state.clear()
        return

    if len(matches) > 1:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=city, callback_data=f"city_{city}")] for city in matches]
        )
        await state.set_state(Form.city_selection)
        await message.answer("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π –∏–∑ –Ω–∏—Ö:", reply_markup=kb)
        return

    city = matches[0]
    await state.update_data(chosen_city=city)
    await state.set_state(Form.waiting_for_category)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤ –≥–æ—Ä–æ–¥–µ ¬´{city}¬ª! üîç\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_kb()
    )

@dp.callback_query(F.data.startswith("city_"), Form.city_selection)
async def process_city_selection(callback: CallbackQuery, state: FSMContext):
    city = callback.data[len("city_"):]
    await state.update_data(chosen_city=city)
    await callback.message.edit_reply_markup()
    await state.set_state(Form.waiting_for_category)
    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª ¬´{city}¬ª! üîç\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_kb()
    )

@dp.callback_query(F.data.startswith("cat_"), Form.waiting_for_category)
async def process_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city = data.get('chosen_city')
    category_map = {
        'cat_restaurants': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ',
        'cat_cinema': '–ö–∏–Ω–æ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã',
        'cat_parks': '–ü–∞—Ä–∫–∏ –∏ –º—É–∑–µ–∏',
        'cat_shopping': '–®–æ–ø–ø–∏–Ω–≥ –∏ –º–∞–≥–∞–∑–∏–Ω—ã',
    }
    category_name = category_map.get(callback.data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        f"–ò—â–µ–º –≤ –≥–æ—Ä–æ–¥–µ ¬´{city}¬ª —Ç–æ, —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ¬´{category_name}¬ª‚Ä¶\n\n"
        "üîé –ü–æ–∫–∞ —á—Ç–æ –±–∞–∑—ã –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç.",
        reply_markup=main_menu_kb
    )
    await state.clear()

@dp.message(F.text.startswith('/start'))
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ. –ù–∞–∂–º–∏ ¬´–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞!",
        reply_markup=main_menu_kb
    )

@dp.message(F.text.startswith('/help'))
async def cmd_help(message: Message):
    await what_can_you_do(message)

@dp.message()
async def fallback(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=main_menu_kb)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
